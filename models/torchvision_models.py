from torchvision.models import *
from models import TrainedModel


model_pool = {}

""" 
    This is not done in an automatic way in order to be explicit which models are in the model pool and what are its key names
    * args.append(weight,name,model)
    * model_pool[name]
""" 
args = []
args.append((AlexNet_Weights.IMAGENET1K_V1,"alexnet_imagenet1k_v1",alexnet)) 
args.append((ConvNeXt_Base_Weights.IMAGENET1K_V1,"convnext_base_imagenet1k_v1",convnext_base)) 
args.append((ConvNeXt_Large_Weights.IMAGENET1K_V1,"convnext_large_imagenet1k_v1",convnext_large)) 
args.append((ConvNeXt_Small_Weights.IMAGENET1K_V1,"convnext_small_imagenet1k_v1",convnext_small)) 
args.append((ConvNeXt_Tiny_Weights.IMAGENET1K_V1,"convnext_tiny_imagenet1k_v1",convnext_tiny)) 
args.append((DenseNet121_Weights.IMAGENET1K_V1,"densenet121_imagenet1k_v1",densenet121)) 
args.append((DenseNet161_Weights.IMAGENET1K_V1,"densenet161_imagenet1k_v1",densenet161)) 
args.append((DenseNet169_Weights.IMAGENET1K_V1,"densenet169_imagenet1k_v1",densenet169)) 
args.append((DenseNet201_Weights.IMAGENET1K_V1,"densenet201_imagenet1k_v1",densenet201)) 
args.append((EfficientNet_B0_Weights.IMAGENET1K_V1,"efficientnet_b0_imagenet1k_v1",efficientnet_b0)) 
args.append((EfficientNet_B1_Weights.IMAGENET1K_V1,"efficientnet_b1_imagenet1k_v1",efficientnet_b1)) 
args.append((EfficientNet_B1_Weights.IMAGENET1K_V2,"efficientnet_b1_imagenet1k_v2",efficientnet_b1)) 
args.append((EfficientNet_B2_Weights.IMAGENET1K_V1,"efficientnet_b2_imagenet1k_v1",efficientnet_b2)) 
args.append((EfficientNet_B3_Weights.IMAGENET1K_V1,"efficientnet_b3_imagenet1k_v1",efficientnet_b3)) 
args.append((EfficientNet_B4_Weights.IMAGENET1K_V1,"efficientnet_b4_imagenet1k_v1",efficientnet_b4)) 
args.append((EfficientNet_B5_Weights.IMAGENET1K_V1,"efficientnet_b5_imagenet1k_v1",efficientnet_b5)) 
args.append((EfficientNet_B6_Weights.IMAGENET1K_V1,"efficientnet_b6_imagenet1k_v1",efficientnet_b6)) 
args.append((EfficientNet_B7_Weights.IMAGENET1K_V1,"efficientnet_b7_imagenet1k_v1",efficientnet_b7)) 
args.append((EfficientNet_V2_L_Weights.IMAGENET1K_V1,"efficientnet_v2_l_imagenet1k_v1",efficientnet_v2_l)) 
args.append((EfficientNet_V2_M_Weights.IMAGENET1K_V1,"efficientnet_v2_m_imagenet1k_v1",efficientnet_v2_m)) 
args.append((EfficientNet_V2_S_Weights.IMAGENET1K_V1,"efficientnet_v2_s_imagenet1k_v1",efficientnet_v2_s)) 
args.append((GoogLeNet_Weights.IMAGENET1K_V1,"googlenet_imagenet1k_v1",googlenet)) 
args.append((Inception_V3_Weights.IMAGENET1K_V1,"inception_v3_imagenet1k_v1",inception_v3)) 
args.append((MNASNet0_5_Weights.IMAGENET1K_V1,"mnasnet0_5_imagenet1k_v1",mnasnet0_5)) 
args.append((MNASNet0_75_Weights.IMAGENET1K_V1,"mnasnet0_75_imagenet1k_v1",mnasnet0_75)) 
args.append((MNASNet1_0_Weights.IMAGENET1K_V1,"mnasnet1_0_imagenet1k_v1",mnasnet1_0)) 
args.append((MNASNet1_3_Weights.IMAGENET1K_V1,"mnasnet1_3_imagenet1k_v1",mnasnet1_3)) 
args.append((MobileNet_V2_Weights.IMAGENET1K_V1,"mobilenet_v2_imagenet1k_v1",mobilenet_v2)) 
args.append((MobileNet_V2_Weights.IMAGENET1K_V2,"mobilenet_v2_imagenet1k_v2",mobilenet_v2)) 
args.append((MobileNet_V3_Large_Weights.IMAGENET1K_V1,"mobilenet_v3_large_imagenet1k_v1",mobilenet_v3_large)) 
args.append((MobileNet_V3_Large_Weights.IMAGENET1K_V2,"mobilenet_v3_large_imagenet1k_v2",mobilenet_v3_large)) 
args.append((MobileNet_V3_Small_Weights.IMAGENET1K_V1,"mobilenet_v3_small_imagenet1k_v1",mobilenet_v3_small)) 
args.append((RegNet_X_16GF_Weights.IMAGENET1K_V1,"regnet_x_16gf_imagenet1k_v1",regnet_x_16gf)) 
args.append((RegNet_X_16GF_Weights.IMAGENET1K_V2,"regnet_x_16gf_imagenet1k_v2",regnet_x_16gf)) 
args.append((RegNet_X_1_6GF_Weights.IMAGENET1K_V1,"regnet_x_1_6gf_imagenet1k_v1",regnet_x_1_6gf)) 
args.append((RegNet_X_1_6GF_Weights.IMAGENET1K_V2,"regnet_x_1_6gf_imagenet1k_v2",regnet_x_1_6gf)) 
args.append((RegNet_X_32GF_Weights.IMAGENET1K_V1,"regnet_x_32gf_imagenet1k_v1",regnet_x_32gf)) 
args.append((RegNet_X_32GF_Weights.IMAGENET1K_V2,"regnet_x_32gf_imagenet1k_v2",regnet_x_32gf)) 
args.append((RegNet_X_3_2GF_Weights.IMAGENET1K_V1,"regnet_x_3_2gf_imagenet1k_v1",regnet_x_3_2gf)) 
args.append((RegNet_X_3_2GF_Weights.IMAGENET1K_V2,"regnet_x_3_2gf_imagenet1k_v2",regnet_x_3_2gf)) 
args.append((RegNet_X_400MF_Weights.IMAGENET1K_V1,"regnet_x_400mf_imagenet1k_v1",regnet_x_400mf)) 
args.append((RegNet_X_400MF_Weights.IMAGENET1K_V2,"regnet_x_400mf_imagenet1k_v2",regnet_x_400mf)) 
args.append((RegNet_X_800MF_Weights.IMAGENET1K_V1,"regnet_x_800mf_imagenet1k_v1",regnet_x_800mf)) 
args.append((RegNet_X_800MF_Weights.IMAGENET1K_V2,"regnet_x_800mf_imagenet1k_v2",regnet_x_800mf)) 
args.append((RegNet_X_8GF_Weights.IMAGENET1K_V1,"regnet_x_8gf_imagenet1k_v1",regnet_x_8gf)) 
args.append((RegNet_X_8GF_Weights.IMAGENET1K_V2,"regnet_x_8gf_imagenet1k_v2",regnet_x_8gf)) 
args.append((RegNet_Y_128GF_Weights.IMAGENET1K_SWAG_E2E_V1,"regnet_y_128gf_imagenet1k_swag_e2e_v1",regnet_y_128gf)) 
args.append((RegNet_Y_128GF_Weights.IMAGENET1K_SWAG_LINEAR_V1,"regnet_y_128gf_imagenet1k_swag_linear_v1",regnet_y_128gf)) 
args.append((RegNet_Y_16GF_Weights.IMAGENET1K_V1,"regnet_y_16gf_imagenet1k_v1",regnet_y_16gf)) 
args.append((RegNet_Y_16GF_Weights.IMAGENET1K_V2,"regnet_y_16gf_imagenet1k_v2",regnet_y_16gf)) 
args.append((RegNet_Y_16GF_Weights.IMAGENET1K_SWAG_E2E_V1,"regnet_y_16gf_imagenet1k_swag_e2e_v1",regnet_y_16gf)) 
args.append((RegNet_Y_16GF_Weights.IMAGENET1K_SWAG_LINEAR_V1,"regnet_y_16gf_imagenet1k_swag_linear_v1",regnet_y_16gf)) 
args.append((RegNet_Y_1_6GF_Weights.IMAGENET1K_V1,"regnet_y_1_6gf_imagenet1k_v1",regnet_y_1_6gf)) 
args.append((RegNet_Y_1_6GF_Weights.IMAGENET1K_V2,"regnet_y_1_6gf_imagenet1k_v2",regnet_y_1_6gf)) 
args.append((RegNet_Y_32GF_Weights.IMAGENET1K_V1,"regnet_y_32gf_imagenet1k_v1",regnet_y_32gf)) 
args.append((RegNet_Y_32GF_Weights.IMAGENET1K_V2,"regnet_y_32gf_imagenet1k_v2",regnet_y_32gf)) 
args.append((RegNet_Y_32GF_Weights.IMAGENET1K_SWAG_E2E_V1,"regnet_y_32gf_imagenet1k_swag_e2e_v1",regnet_y_32gf)) 
args.append((RegNet_Y_32GF_Weights.IMAGENET1K_SWAG_LINEAR_V1,"regnet_y_32gf_imagenet1k_swag_linear_v1",regnet_y_32gf)) 
args.append((RegNet_Y_3_2GF_Weights.IMAGENET1K_V1,"regnet_y_3_2gf_imagenet1k_v1",regnet_y_3_2gf)) 
args.append((RegNet_Y_3_2GF_Weights.IMAGENET1K_V2,"regnet_y_3_2gf_imagenet1k_v2",regnet_y_3_2gf)) 
args.append((RegNet_Y_400MF_Weights.IMAGENET1K_V1,"regnet_y_400mf_imagenet1k_v1",regnet_y_400mf)) 
args.append((RegNet_Y_400MF_Weights.IMAGENET1K_V2,"regnet_y_400mf_imagenet1k_v2",regnet_y_400mf)) 
args.append((RegNet_Y_800MF_Weights.IMAGENET1K_V1,"regnet_y_800mf_imagenet1k_v1",regnet_y_800mf)) 
args.append((RegNet_Y_800MF_Weights.IMAGENET1K_V2,"regnet_y_800mf_imagenet1k_v2",regnet_y_800mf)) 
args.append((RegNet_Y_8GF_Weights.IMAGENET1K_V1,"regnet_y_8gf_imagenet1k_v1",regnet_y_8gf)) 
args.append((RegNet_Y_8GF_Weights.IMAGENET1K_V2,"regnet_y_8gf_imagenet1k_v2",regnet_y_8gf)) 
args.append((ResNeXt101_32X8D_Weights.IMAGENET1K_V1,"resnext101_32x8d_imagenet1k_v1",resnext101_32x8d)) 
args.append((ResNeXt101_32X8D_Weights.IMAGENET1K_V2,"resnext101_32x8d_imagenet1k_v2",resnext101_32x8d)) 
args.append((ResNeXt101_64X4D_Weights.IMAGENET1K_V1,"resnext101_64x4d_imagenet1k_v1",resnext101_64x4d)) 
args.append((ResNeXt50_32X4D_Weights.IMAGENET1K_V1,"resnext50_32x4d_imagenet1k_v1",resnext50_32x4d)) 
args.append((ResNeXt50_32X4D_Weights.IMAGENET1K_V2,"resnext50_32x4d_imagenet1k_v2",resnext50_32x4d)) 
args.append((ResNet101_Weights.IMAGENET1K_V1,"resnet101_imagenet1k_v1",resnet101)) 
args.append((ResNet101_Weights.IMAGENET1K_V2,"resnet101_imagenet1k_v2",resnet101)) 
args.append((ResNet152_Weights.IMAGENET1K_V1,"resnet152_imagenet1k_v1",resnet152)) 
args.append((ResNet152_Weights.IMAGENET1K_V2,"resnet152_imagenet1k_v2",resnet152)) 
args.append((ResNet18_Weights.IMAGENET1K_V1,"resnet18_imagenet1k_v1",resnet18)) 
args.append((ResNet34_Weights.IMAGENET1K_V1,"resnet34_imagenet1k_v1",resnet34)) 
args.append((ResNet50_Weights.IMAGENET1K_V1,"resnet50_imagenet1k_v1",resnet50)) 
args.append((ResNet50_Weights.IMAGENET1K_V2,"resnet50_imagenet1k_v2",resnet50)) 
args.append((ShuffleNet_V2_X0_5_Weights.IMAGENET1K_V1,"shufflenet_v2_x0_5_imagenet1k_v1",shufflenet_v2_x0_5)) 
args.append((ShuffleNet_V2_X1_0_Weights.IMAGENET1K_V1,"shufflenet_v2_x1_0_imagenet1k_v1",shufflenet_v2_x1_0)) 
args.append((ShuffleNet_V2_X1_5_Weights.IMAGENET1K_V1,"shufflenet_v2_x1_5_imagenet1k_v1",shufflenet_v2_x1_5)) 
args.append((ShuffleNet_V2_X2_0_Weights.IMAGENET1K_V1,"shufflenet_v2_x2_0_imagenet1k_v1",shufflenet_v2_x2_0)) 
args.append((SqueezeNet1_0_Weights.IMAGENET1K_V1,"squeezenet1_0_imagenet1k_v1",squeezenet1_0)) 


for weight,name,model in args:
    model_pool[name] = TrainedModel(name,lambda : model(weights=weight), transformation=weight.transforms())